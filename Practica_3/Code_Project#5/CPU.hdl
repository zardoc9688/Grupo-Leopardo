// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.
    Not(in=instruction[15], out=isAInstruction);
    And(a=instruction[15], b=instruction[5], out=ALUtoA);
    Mux16(a=instruction, b=ALUout, sel=ALUtoA, out=Ain);
    Or(a=isAInstruction, b=ALUtoA, out=loadA);
    ARegister(in=Ain, load=loadA, out=Aout, out[0..14]=addressM);
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD, out=Dout);
    Mux16(a=Aout, b=inM, sel=instruction[12], out=AMout);
    ALU(x=Dout, y=AMout, 
        zx=instruction[11], nx=instruction[10], 
        zy=instruction[9],  ny=instruction[8], 
        f=instruction[7],   no=instruction[6], 
        out=ALUout, out=outM, zr=ZRout, ng=NGout);
    And(a=instruction[15], b=instruction[3], out=writeM);
    Or(a=ZRout, b=NGout, out=ZeroOrNeg);
    Not(in=ZeroOrNeg, out=Pos);
    And(a=instruction[2], b=NGout, out=JLT);
    And(a=instruction[1], b=ZRout, out=JEQ);
    And(a=instruction[0], b=Pos, out=JGT);
    Or(a=JLT, b=JEQ, out=JLE);
    Or(a=JLE, b=JGT, out=Jump);
    And(a=instruction[15], b=Jump, out=PCload);
    Not(in=PCload, out=PCinc);
    PC(in=Aout, load=PCload, inc=PCinc, reset=reset, out[0..14]=pc);
    /*Instruction decoding: Determines whether it is an A (load address) or C (compute) instruction.
    Register A: Stores an address or a constant value.
    Register D: Stores data for ALU operations.
    ALU: Performs arithmetic and logic operations.
    Memory write control: Determines whether to write to memory.
    Program counter (PC): Controls the flow of the program, deciding the next instruction to execute.*/ 
}